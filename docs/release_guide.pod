=head1 release_guide.pod - guide to Rakudo releases

Rakudo's development release cycle is based on Parrot's release
cycle.  Parrot releases the third Tuesday of each month; Rakudo
will generally issue its own development release two days after
the Parrot release.

Each development release is given a sequential number and a 
code name based on an active Perl Mongers group.  Rakudo's
February 2009 release is #14; prior releases were bundled as
part of monthly Parrot releases.

=head2 Development releases

  2009-02-26   Rakudo #14 "Vienna"             (pmichaud)
  2009-03-20   Rakudo #15 "Oslo"               (pmichaud)
  2009-04-23   Rakudo #16 "Bratislava"         (pmichaud)
  2009-05-21   Rakudo #17 "Stockholm"          (pmichaud)
  2009-06-18   Rakudo #18 "Pittsburgh"         (pmichaud)
  2009-07-23   Rakudo #19 "Chicago"            (moritz)
  2009-08-20   Rakudo #20 "PDX"                (kyle)
  2009-09-17   Rakudo #21 "Seattle"            (particle)
  2009-10-22   Rakudo #22 "Thousand Oaks"      (duff)
  2009-11-19   Rakudo #23 "Lisbon"             (masak)
  2009-12-17   Rakudo #24 "Seoul"              (chromatic)
  2010-01-22   Rakudo #25 "Minneapolis"        (pmichaud)
  2010-02-18   Rakudo #26 "Amsterdam"          (mberends)
  2010-03-18   Rakudo #27 "Copenhagen"         (smash)
  2010-04-22   Rakudo #28 "Moscow"             (moritz)
  2010-05-20   Rakudo #29 "Erlangen"           (colomon)
  2010-06-17   Rakudo #30 "Kiev"               (masak)
  2010-07-22   Rakudo #31 "Atlanta"            (Coke)
  2010-08-19   Rakudo #32 "Pisa"               (mathw)
  2010-09-23   Rakudo #33 "Milan"              (moritz)
  2010-10-21   Rakudo #34 "Paris"              (duff)
  2010-11-18   Rakudo #35 "Melbourne"          (masak)
  2010-12-23   Rakudo #36 "New York"           (smash)
  2011-01-20   Rakudo #37 "BristolBath"        (tadzik)
  2011-02-17   Rakudo #38 "Toulouse"           (arnsholt)
  2011-03-17   Rakudo #39 "Orlando"            (jdhore)
  2011-04-21   Rakudo #40 "ZA"                 (duff)
  2011-05-19   Rakudo #41 "Dahut"              (jdhore)
  2011-06-23   Rakudo #42 "Bruxelles"          (jdhore)
  2011-07-21   Rakudo #43 "Beijing"            (mberends,moritz)
  2011-08-18    -- none --
  2011-09-30   Rakudo #44 "Riga"               (tadzik)
  2011-10-20   Rakudo #45 "Houston"            (duff)
  2011-11-17   Rakudo #46 "London"             (tadzik)
  2011-12-22   Rakudo #47 "Columbus"           (moritz)
  2012-01-23   Rakudo #48 "Toronto"            (moritz)
  2012-02-23   Rakudo #49 "SPb"                (masak)
  2012-03-22   Rakudo #50 "Argentina"          (masak)
  2012-04-19   Rakudo #51 "Brazos Valley"      (Coke)
  2012-04-25   2012.04.1                       (moritz)
  2012-05-17   Rakudo #52 "MadMongers"         (tadzik)
  2012-06-21   Rakudo #53 "Strasbourg"         (duff)
  2012-07-19   Rakudo #54 "Tallinn"            (masak)
  2012-08-23   Rakudo #55 "Frankfurt"          (tadzik,moritz)
  2012-09-20   Rakudo #56 "Perl"               (masak)
  2012-09-29   2012.09.1                       (pmichaud)
  2012-10-18   Rakudo #57 "Tokyo"              (duff)
  2012-11-22   Rakudo #58 "Walnut"             (FROGGS)

=head2 Planned 2012 and 2013 releases

Dates are based on Parrot's expected release schedule.

  2012-12-20   Rakudo #59 masak
  2013-01-17   Rakudo #60 isBEKaml
  2013-02-21   Rakudo #61 tadzik
  2013-03-21   Rakudo #62
  2013-04-18   Rakudo #63
  2013-05-23   Rakudo #64

=head2 Suggested .pm group names for future releases

More names can be gotten from L<http://www.pm.org> if you 
can't think of one with any particular significance to Perl 
6 or Rakudo.

=head2 Steps to create a release (for release managers)

Each Rakudo development release is timed to occur two
days after a Parrot monthly release.

=over 4

=item 1.

A few days before the Parrot release, it's a good idea to...

=over 4

=item *

Remind people of the upcoming release, invite people to
update the ChangeLog file, update the ROADMAP, choose a
release name, etc.

=item *

Verify that the Parrot master branch is able to build Rakudo
and run the spectest suite. Also check the smolder reports
at L<http://smolder.parrot.org/app/projects/smoke_reports/5>.

=item *

If Parrot's master branch exhibits any problems building or running
Rakudo (that require changes to Parrot to fix), immediately
report them to the Parrot development team so they can be
fixed prior to Parrot's release.

=item *

Review the RT queue for tickets that might need resolving
prior to the release, addressing them as needed.  "Tickets
that need resolving" is left your discretion.  Any problem
that has a large impact on users is worth addressing either
as a fix or as prominent documentation (the README and/or
the release announcement).

=item *

Create a draft release announcement in docs/announce/YYYY.MM .
You can often use the previous release's file as a starting point,
updating the release number, version information, name, etc. as
appropriate.

  $ git add docs/announce/YYYY.MM
  $ git commit docs

=item *

If it's a month relatively early in the calendar year, 
double-check that the copyright date in the README file includes 
the current year.  (It's not necessary to update copyright dates 
in other files, unless you know that a given file has been modified
in a year not reflected by the file's copyright notice.)

=back

=item 2.

The short period following the Parrot release until the
Rakudo release is generally intended for fixing bugs,
updating documentation, and so on.

=item 3.

Update Rakudo's leap-second tables:

  $ perl tools/update-tai-utc.pl src/core/tai-utc.pm

If a new leap second has been announced, F<tai-utc.pm> will be modified, so
commit the new version:

  $ git commit src/core/tai-utc.pm

But probably there won't be any new leap seconds, in which case the file
will be unchanged.

B<Note>: this program requires the perl module L<Time::y2038> be installed.

=item 4.

As the actual release date nears, review the git log history
to see if any additional items need to be added to the ChangeLog.
This can be conveniently done with  "git log --since=yyyy-mm-dd --reverse".

  $ git commit docs/ChangeLog

=item 5.

When it's time to cut the release, finalize the new release 
announcement in docs/announce/YYYY.MM.  (If one hasn't already
been created, see step 1 above.) Highlight areas in which the 
new release is significant.  If possible, also give some small 
details about the choice of release name.  (If the details 
are a bit lengthy, this can often best be done as a separate
section at the bottom of the announcement.)

Include a list of contributors since the last release in the announcement.
You can get an automatically generated list by running

  $ perl tools/contributors.pl

B<Note>: this program requires the perl module L<Date::Simple> be installed.

Please check the result manually for duplicates and other errors.

  $ git add docs/announce/YYYY.MM
  $ git commit docs

=item 6.

Update the release dates and names at the top of this file
(F<docs/release_guide.pod>).  Also improve these instructions if
you find any steps that are missing.

  $ git commit docs/release_guide.pod

=item 7.

Create an NQP release with the same C<YYYY.MM> version number
as Rakudo. Follow NQP's C<docs/release_guide.pod> file to do that.

=item 8.

Go back to the Rakudo repository, and update the NQP dependency:

  $ echo YYYY.MM > tools/build/NQP_REVISION
  $ git commit -m '[release] bump NQP revision' tools/build/NQP_REVISION

=item 9.

Enter the new version into the F<VERSION> file, and commit the changes:

  $ echo YYYY.MM > VERSION
  $ git commit -m '[release] bump VERSION' VERSION

=item 10.

Make sure any locally modified files have been pushed back to github.

  $ git status
  $ git push

=item 11.

Make sure everything compiles and runs from a known clean state:

  $ make realclean
  $ perl Configure.pl --gen-parrot
  $ make
  $ make test
  $ make stresstest

There are many tests to run for the stresstest target.  If
you have a machine with multiple CPU cores, you may want to
execute that last as

  $ TEST_JOBS=4 make stresstest

where 4 is the number of CPU cores.  This should make the
total time to execute all of the tests dramatically less.

Continue adjusting things until make stresstest passes as expected.
Often this means fixing a bug, fudging a test, or (temporarily?)
commenting out a test file in t/spectest.data .  Use your best
judgment or ask others if uncertain what to do here.

=item 12.

Create a tarball by entering C<make release VERSION=YYYY.MM>,
where YYYY.MM is the month for which the release is being made.
This will create a tarball file named C<rakudo-YYYY.MM.tar.gz>.

B<Caution>: this step removes any untracked files in F<t/spec>.
So please make a backup if you have any important data in there.

=item 13.

Unpack the tar file into another area, and test that it
builds and runs properly using the same process in step 8.
If there are any problems, fix them and go back to step 8.

=item 14.

Tag the release by its release month ("YYYY.MM") and its code name.

  $ git tag -a -m"tag release #nn" YYYY.MM    # e.g., 2010.02
  $ git tag -a -m"tag release #nn" CODENAME   # e.g., "Bratislava"
  $ git push --tags

=item 15.

Upload the release tarball to github's download area at
L<http://github.com/rakudo/rakudo/downloads>.

=item 16.

To avoid public confusion with Rakudo Star releases, we now publish 
compiler release announcements ONLY to perl6-compiler@perl.org.  
(We may restart widespread announcements of compiler releases 
once they are known, or we may begin publishing a single
announcement for both.)

=item 17.

Update the Wikipedia entry at L<http://en.wikipedia.org/wiki/Rakudo>.

=item 18.

You're done!  Celebrate with the appropriate amount of fun.

=back

=head1 COPYRIGHT

Copyright (C) 2009-2012, The Perl Foundation.

=cut

# Local Variables:
# fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
