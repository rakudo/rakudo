my class Rat { ... }
my class X::Cannot::Capture       { ... }
my class X::Numeric::DivideByZero { ... }
my class X::NYI::BigInt { ... }

my class Int { ... }
my subset UInt of Int where {
    nqp::not_i(nqp::isconcrete($_)) || nqp::isge_I($_,0)
}

my class Int does Real { # declared in BOOTSTRAP
    # class Int is Cool
    #     has bigint $!value is box_target;

    multi method WHICH(Int:D: --> ValueObjAt:D) {
        nqp::box_s(
          nqp::concat(
            nqp::if(
              nqp::eqaddr(self.WHAT,Int),
              'Int|',
              nqp::concat(nqp::unbox_s(self.^name), '|')
            ),
            nqp::tostr_I(self)
          ),
          ValueObjAt
        )
    }

    proto method new(|) {*}
    multi method new(Any:U $type) {
        die "Cannot create an Int from a '$type.^name()' type object";
    }
    multi method new(Any:D \value --> Int:D) { self.new: value.Int }
    multi method new(int   \value --> Int:D) {
        # rebox the value, so we get rid of any potential mixins
        nqp::fromI_I(nqp::decont(value), self)
    }
    multi method new(Int:D \value = 0 --> Int:D) {
        # rebox the value, so we get rid of any potential mixins
        nqp::fromI_I(nqp::decont(value), self)
    }

    multi method raku(Int:D: --> Str:D) {
        self.Str;
    }
    multi method Bool(Int:D: --> Bool:D) {
        nqp::hllbool(nqp::bool_I(self));
    }

    method Capture() { X::Cannot::Capture.new( :what(self) ).throw }

    method Int() { self }

    method sign(Int:D: --> Int:D) {
        nqp::isgt_I(self,0) || nqp::neg_i(nqp::islt_I(self,0))
    }

    multi method Str(Int:D: --> Str:D) {
        nqp::p6box_s(nqp::tostr_I(self));
    }

    method Num(Int:D: --> Num:D) {
        nqp::p6box_n(nqp::tonum_I(self));
    }

    method Rat(Int:D: $? --> Rat:D) {
        nqp::p6bindattrinvres(
          nqp::p6bindattrinvres(nqp::create(Rat),Rat,'$!numerator',self),
          Rat,'$!denominator',1
        )
    }
    method FatRat(Int:D: $? --> FatRat:D) {
        nqp::p6bindattrinvres(
          nqp::p6bindattrinvres(nqp::create(FatRat),FatRat,'$!numerator',self),
          FatRat,'$!denominator',1
        )
    }

    method abs(Int:D: --> Int:D) {
        nqp::abs_I(self, Int)
    }

    method Bridge(Int:D: --> Num:D) {
        nqp::p6box_n(nqp::tonum_I(self));
    }

    method chr(Int:D: --> Str:D) {
        nqp::if(
          nqp::isbig_I(self),
          die("chr codepoint %i (0x%X) is out of bounds".sprintf(self, self)),
          nqp::p6box_s(nqp::chr(nqp::unbox_i(self)))
        )
    }

    method sqrt(Int:D: --> Num:D) {
        nqp::p6box_n(nqp::sqrt_n(nqp::tonum_I(self)))
    }

    proto method base(|) {*}
    multi method base(Int:D: Int:D $base --> Str:D) {
        2 <= $base <= 36
          ?? nqp::p6box_s(nqp::base_I(self,nqp::unbox_i($base)))
          !! Failure.new(X::OutOfRange.new(
               what => "base argument to base", :got($base), :range<2..36>))
    }
    multi method base(Int:D: Int(Cool) $base, $digits? --> Str:D) {
        2 <= $base <= 36
          ?? $digits && ! nqp::istype($digits, Whatever)
            ?? $digits < 0
              ?? Failure.new(X::OutOfRange.new(
                   :what('digits argument to base'),:got($digits),:range<0..1073741824>))
              !!  nqp::p6box_s(nqp::base_I(self,nqp::unbox_i($base)))
                    ~ '.'
                    ~ '0' x $digits
            !! nqp::p6box_s(nqp::base_I(self,nqp::unbox_i($base)))
          !! Failure.new(X::OutOfRange.new(
               :what('base argument to base'),:got($base),:range<2..36>))
    }
    method !eggify($egg --> Str:D) { self.base(2).trans("01" => $egg) }
    multi method base(Int:D: "camel" --> Str:D) { self!eggify: "🐪🐫" }
    multi method base(Int:D: "beer"  --> Str:D) { self!eggify: "🍺🍻" }

    # If self is Int, we assume mods are Ints also.  (div fails otherwise.)
    # If do-not-want, user should cast invocant to proper domain.
    method polymod(Int:D: +@mods --> Seq:D) {
        fail X::OutOfRange.new(
          :what('invocant to polymod'), :got(self), :range<0..^Inf>
        ) if self < 0;

        gather {
            my $more = self;
            if @mods.is-lazy {
                for @mods -> $mod {
                    $more
                      ?? $mod
                        ?? take $more mod $mod
                        !! Failure.new(X::Numeric::DivideByZero.new:
                             using => 'polymod', numerator => $more)
                      !! last;
                    $more = $more div $mod;
                }
                take $more if $more;
            }
            else {
                for @mods -> $mod {
                    $mod
                      ?? take $more mod $mod
                      !! Failure.new(X::Numeric::DivideByZero.new:
                           using => 'polymod', numerator => $more);
                    $more = $more div $mod;
                }
                take $more;
            }
        }
    }

    method expmod(Int:D: Int:D \base, Int:D \mod --> Int:D) {
        nqp::expmod_I(self, nqp::decont(base), nqp::decont(mod), Int);
    }
    method is-prime(--> Bool:D) {
        my constant bits = 0x0000000000A00008_0200000002080008_2000022080080000_8220820200020800_0082000000200282_2800020080082000_0800008008800000_2208088080000288_0000020080002000_0000808000020220_8002088000280000_0020000002002000_0A08020200800000_008020200000200A_2800802080020880_0000200200008220_0082002000080208_08028000A00A2080_0228000200200000_0282000008200000_00020A0022800002_0000208000028008_200000200000200A_0000802000800800_0800820808200800_2008088000280202_00000800008A2000_0A00000020020800_0008202080000008_0000000080020800_0020000200000200_820000020A000008_0020820000800880_8000000008808028_028A002000200000_2802080000000002_0000800000800200_000A000000002280_00008A0802022800_0008008028000000_0088200200208000_0020082822800000_0000800000A00008_0000080002008000_20000008020A00A0_8000008020008000_0202000000008000_20008A2020082000_8200000800008800_2000000002088000_08A00000A0080802_0820200A08000000_8200000088200008_0000000002002820_0000220000008020_0002208080202208_0800800800020000_0200000200020A08_0000002202002088_00000200A0080080_0028008020200200_0000000200008000_0820080000022002_0028000800A00800_0208208000080202_2002000000000820_0A00A08020000008_0208082208200000_0000000800022022_0008200020020200_2008088000080000_08808820000A0020_0820020200800200_0000080080208000_0080820822000082_8008200800A00200_0002008008000088_2022880080800000_0008200208820000_000200A000200000_0880020002000002_8220008808000220_2208000008000088_0020002080000000_0A00000020200820_008020028008A00A_0002000000082000_8000828208200000_A00008000000A080_0882002800080002_0020200000200800_8200000002000280_00000220A0080000_8000820200020000_0280200088088000_2022000802802022_8000800008000008_000A00000800000A_00000800008000A0_0008000000000020_2000008200002000_08A2000002080000_8228828000800000_0008080080000082_0800000002020880_0800008A00008228_0280200000008008_0802000080082800_0200820208200008_2080000000000202_08000000A0802000_8200000820000008_A202000080200202_00A0080082020002_0008200808200A00_A002008280088000_0002002002802080_0000000008800200_8008280000008008_20028008A2020822_0800200020800200_0000200008082208_28000800200A2000_0200800000808800_0008200000080202_0000020820000002_8220808800020020_0000000208000002_2000802882000020_0800220000200000_8080080002000000_0080802000000080_8228000000200200_020008200000008A_2000020080080022_0820228000000008_0000208208080000_0022082020000000_8200800008828028_028200000A000280_0000000002000802_0020200208000008_0008002088200080_00008000820200A0_0008020800000000_2000080000208200_00A0000800820080_0A00008000800000_0008002288008008_00020220000000A0_0000008A20000828_0082000000000200_0002020080800080_8008020008A08800_2008002000008200_0800020002880820_0000808A08820020_8200088000080008_20200A0800000800_0200820028020020_0088008082000000_00000000020200A0_0A20000208000808_A08000008A000000_2082820020080020_0008020800800220_0082082008080000_0002002000802000_0220200000208800_2208002000000002_0002000882082000_8800A00208020000_2202082200000200_0080020000800082_0008020820200800_000A288282200008_0000082002020000_0000020008A20808_000000028000A000_0000000800000802_0008200000A08000_0000088008002000_08000000000A0082_0000200200000028_0002200080080000_0002020000000002_0020000020008020_000000200008008A_0080022002800080_0800208000008220_2000200002000008_0822000000800080_8800028000220808_808000020A00A080_20000028800000A2_0828000820A00008_0202000000080208_2000880000800000_8000020008220008_2002200002280000_00A0080000082800_0000A00020028008_8000080080000202_2000002800020020_0200808008028800_0000000000202208_0820000020000000_8008800200800200_8080002200200000_0000002800000080_0808200200000828_0000202008002008_2020020000802000_8020200A00228020_0008008002288000_2082020880000002_0220008808020000_8208002280000008_2020000000002802_0800808000000000_0000280000208002_00000000208820A0_0A00000200200000_0080002000208080_0800002820000880_0828008220000208_0000200008082200_0000800020002880_8028000800000020_020A000000280002_0082000000000800_8820208020028200_0000008008002002_0020802882000020_0200200820020000_800A008200080000_00820000000000A0_0A00000008000A00_0208000002008002_0800820022080002_0008220000A00000_0000200000008080_00200A0020880002_0008820208208020_008200A002000000_28000000A2080800_0000008000808020_A008008080280008_0000820882000000_0200000828208000_0002080000088002_0000000820020080_8008000220020008_0200002000008002_20020000020000A0_0020020000008020_0280002202002080_08000A2000020000_0000020000208008_0208208082008280_2080000020002800_0000800800000228_0200080288280088_0000020000000002_0000200020220020_8088008000008002_0820002000080000_0800000200800A08_0000000080200000_28008208200008A0_0000028A00000800_0000000208000200_0822020080000882_8020000A00000808_208800A082000000_0020000002080020_0200A00800000008_2000008008200002_20808A0080022080_0808020028020000_0000000002080008_00A0802022880000_0028800200820A00_8000280008002000_2080800002000080_0000220200200200_800008A002002088_0002802020080800_0000000208828800_2080202000000000_0082000080002002_0200000028008220_800800000808200A_0000000000820080_0008A00020200820_0000080080002200_08208000028A0080_8A20020020000008_020000220820A002_0000000080020002_8008020800208A00_0200280200000200_20008A20A0020800_0028200808800000_0080200002008002_00000A0002800002_8000200000800008_0002080008200200_2020000080820080_0800828020028000_8002208002282000_0000880000002080_0008008000200000_A008082080000088_00000008A0020002_0820008A00208228_0200000202002000_00000000000A2880_0020020000028820_2202002008000280_2002080000000020_0200000008000208_800800A200080080_2020022000802020_0008820008000200_A000000202082000_0082880820000080_8000800000800008_808000000000200A_0000000020020080_0020228020000220_0080008002082088_2800000000020002_0208020800000000_2208000080008002_00820A0002002800_0020A00200808008_000000A008000002_0000000080000820_0000208820000820_0008000202200000_0802800820882000_0A00020000200000_8000080202008002_0080800082020000_8000220000000820_0000088002008000_0020022000802002_0008800808828008_0282000008008200_0022080000880022_0820A08000820220_000A00A080000080_00800A0000000082_0200808808000820_000008008028A002_08A0000020020080_0008800200220000_0000202002002000_0082002082000800_8000000A00208000_0082080000080280_00008020A0080002_0000220800220000_2000200002000082_08000A0000800000_8820000800020000_A200008088002082_00808000020000A0_0008000808028000_0080200000008002_0800002822080080_0020800000000008_A008000208000088_0802800000000080_8000000A20A08800_8000002208000200_0000080020002000_0200200000220820_2080000080080200_2880020880000820_0200200A08000000_8208002200282082_0080800000800000_0000208000008A00_A002008002080202_0800080002002020_0020008008820A00_0200200282002000_2000002000000880_0000000220200228_0000000000008000_2022080000820880_0220220008008820_0000200008080280_08000A00A2080800_8000000020000000_800A002008002082_0080000882002800_0200008000220200_000828000000A200_0822000000082080_0220808000020000_008008020A202002_0082802080080000_0028200020800008_8000082200008000_0020020080880000_0008020008200808_0280000088000000_0080080020800000_8200200820028200_0008082000002280_2020800802020800_0208200000000820_8008200002002200_00000808020A0080_0008800020800800_2000080008200000_0000002020000000_0020208200000008_008000A00008A000_0822002000022000_8220020808008820_220800A008000000_0082000020000000_8800000820808008_2002008280200288_0000822000000002_0000808800200000_0082200200282000_0000802000000000_8800800200220000_020800008020A000_28000028A0080000_0000228200000800_000020A00A002200_0020880080080000_8208800808000820_2000202008008280_0820020820002002_8000200200020000_2000008288082000_0080800080020000_0000220000020800_A002008000008000_0882800020082020_0828008028000008_8208282280200000_20800000A2020022_0000020000800008_8202088002008000_0002020020080000_8000800800A08028_020020A002000282_00200800A0080022_0A00008000000200_8002000200000200_2020000080000882_0000800828008000_2080280000200202_0000082002820000_0A08008020800000_0200282000008000_0082022002020000_8000020220208000_828000A200082000_28000A2080080000_8008200800800008_020A208000000080_00200A0000800800_0020000A00800228_200200000008008A_00000A0000002002_0800200020200000_0080000002000000_0020000800000000_0A28020208820000_808800000A002088_0800000022000022_0000000000008A00_8082002000082280_00000800A0800080_8020000000020820_000000A008080202_0000000800080000_8020208A08028000_8000000000282000_0080020880002082_0200028008008800_2008000082000008_0020002000800000_8808020008200A08_2200000288200000_0000802000080000_8000020000800000_0280002000008008_0822800000000802_0008200000028008_0080008008200200_0080000002080800_8220008828800000_2008080008002008_0020080082002082_0008A08020200800_2008000080000008_0000800800820020_0A00808008020808_0080082202200000_20800228200A0080_8000020000208800_0000080002000280_20008000800A2800_0028200200220028_0202000080000082_0022020802002000_0800000220008028_8008088000000208_2000802802000020_0200208000000800_A008200202002200_0800000020080020_0200020208000A00_0200202208002008_0800000882020000_8000200800008220_0280088200000000_2020000080000000_8000200000008008_2202000002000000_2880020800880000_8220200000000200_A000082080000282_0000080002000800_0808A08800020000_200200020000000A_00A2082800802000_0208800220020200_800828000820808A_0002800002000080_0000028020008820_8002002008002200_0000880020002080_0028020000800000_2008000088288000_0820020880802802_0000808020000228_0008082000000200_0080020082800020_0800A08000220000_000208000200A000_0800080000002020_0020008008A00000_020820220200800A_0080020000000002_0008020800000028_0082000000088000_2020000000002080_8000A00008808000_0000208082000000_2800080022800000_0800200008020008_8000002200082080_2000020000002000_0200020820000000_0082200280008002_0882002020020000_8200808020820A00_0088080280002002_0882802802000080_0020208200000820_8002088000088000_28020020A0020082_0208020800228008_0002200000008200_00000800A0000800_0000200008800200_8200008208080000_00A00000000028A0_0A00000008028200_0082000002202008_0000080800020080_0020020200800808_0000200088000008_2000820802000820_8020000800200820_0000082200082208_0800000000820002_0000800000008800_008800808A000002_0000000002000820_8200A00008000000_A20A008000080002_0080022080800002_0808008828008200_2000208000200000_0080802000082000_0820000000200000_2080000208200080_0082020802080820_8800220800008000_0282088000008088_00208800A0800002_0000020208000028_0008200088280000_0002080800002020_0000808008000000_0002000280200202_0000080800000002_0808008800008200_0000000202008200_08A2002802800020_0800000000200800_020008200A200002_2080800080020080_0028028020808208_8200200000000000_0800820020022000_0000020208000800_2000200080200002_0082080020000022_0000800A08000000_8202000000000282_00200820800008A0_0A08200000000220_2002200080002008_0020800002020000_0000808000800000_0200000200208008_0800020880020800_0808200000A08808_0000282208000000_2000822000080000_0220020000028800_208A00000A008082_08020200A0802020_0000000000020200_8000088200280280_2000800080802020_0008820800200820_208028000020A00A_0020800800880000_8200020228220200_0000000000008000_0000002800080820_0020208000800820_8080002200000080_00200A0000082080_0020820000008000_0002200000280280_0802080802800802_8800000200020220_0000000080000008_20A0020880822000_0A00028800020000_A008000002082202_0800880020000080_0220000008800008_2000280002000008_2080802000020802_8820200000800208_8082200202008008_0022022000000002_0208000800A00000_0280000080208000_0802000000080020_0020208020800028_000A000000200088_00A00808020000A0_0008028008200800_2088080080080202_0022000800822000_0000008220800008_208020020A00A002_2800020002000800_0820228000008820_8000080208000280_2000820080880000_0220000800A08000_0200000080288080_20A00200A2080020_0820800200020200_8202008000002000_0080080000002880_0200A00000028020_0008088000200008_0802002820820000_0020028000000208_2008000080002000_28820000A2020000_8000020820208A20_8082080000080000_0020022080020802_0208A00000828028_0208002008000000_0820020000802000_8000200200028000_0008008000202000_00808A2800020000_0800000008020800_200A208200000008_0800080000802020_8000008200220A00_0000200202000088_20008020200000A0_0800000220200008_0002200000008008_0820800080000082_0220000000820800_008000A082000200_00A2000880082800_0220008A20000020_000208200028220A_0000020882000800_0808808000208020_2000080000000200_0002002000880080_0820020000200808_0000080200200000_2802020800000080_8008008820000A08_8200002202000080_0820000080822000_8000000800A00008_2002000002200082_20820A0022800002_0000A00000800008_8000008000002002_2000080882000022_0000820000008800_2008000280280000_0082800000022020_0028020028000200_2200202280202000_0880000002000880_0020208820800200_008000A002088000_2800002000022080_0000800200200800_208200A002080002_0800000080880002_0000008808820200_A002002080200200_0000022000020000_0000008808020A00_000000020200200A_0000080822002000_8000020020A20008_0208000082000080_0002002802080000_0820020000800228_0000202002000208_08200000A0082000_8028020008200800_0280002000000282_0000080882000800_8020800020808200_2200080080080002_2080800082820020_0200A08828208000_008000020028A002_0000080000880000_8200028020020008_A200000200208002_2800002000000000_8028008800800000_020220000A002080_0002080020002800_0208020200820020_0000002002208002_0020000800080000_0800800008800008_0000008288200000_00A0880080020082_0000000028000200_0082080000088200_0880002022020080_0008800200A00000_0088200080000002_00008208000A0880_8020208020200028_800200A000008280_00000020008A0082_8000000800208000_2008008080088200_2880000020082800_8000800200020028_8000008208002008_2000000000802802_0A08000008000220_008808000220020A_0002800002880000_0828000008020000_A000202000000080_08828200020A0020_0008000A20208000_0200200200082280_08020800A0002000_0208000000000800_020800A00A008000_00A2020080082800_8220800028000000_000000A200200280_0000880800022000_0808000028208800_0002088282008002_0020000022802000_8008000200220000_0280080002008008_0080800020000022_0808000820000008_0280200008008200_0002000020820000_0000220208008808_2000208080000200_2002000820000802_8020800A00000000_A200002280280002_00000A2000802080_0200808020020800_0080208202082208_0000000800020080_0A00800028200008_0280080000202082_2080802000080020_0020008000200000_0200288202088080_00208000000A0802_0000020000220000_0000200000200080_0020020020082020_0000A00A08800000_000A002088000088_0000800882800080_0208820008000200_A000208080200000_0800880802002080_0208828000000800_800020000000A002_0080002820000082_8020000020200800_008008A008000208_2020000000882800_0200200A00000820_0000002008080082_2080000000000020_8000208020020208_A200000000080088_2080020000000802_0800220808000200_8000200080280002_0022002020080000_8208020000000000_8208002008002002_00020000A20200A0_0800220200008800_8002000000002080_28000200000A0882_8000000008200020_2000000000208000_0880080882000800_8020200020808008_0008088000080200_2020022800020020_0200008028008800_000208820200A200_0000080800080020_8228008008220808_0000002200000002_00000020A0080020_8000000000000020_0282288202000000_20008A0020080800_8000000A08808020_0280008008200200_2822000020880022_0A00808020000200_000A000008002000_00000000020228A2_0000820000000220_800008000020200A_0002080022802080_0A20000000A00000_2000080082000002_08020008000808A0_8000000000000008_0282000008080080_2000002000800082_0020020000808000_2000200080200000_08800A0020000820_0800200800820200_8202080000280000_0000882002802020_0000220800208000_808200808020A202_08200800020A0000_0008000020020A00_2000002000002008_08800208A2080822_0000028820800820_0080200208080008_08200A0000020000_8008A00200220828_0200200008080000_0020020802802000_0800008A20008000_A00200A208200080_0080822080800080_0A08000000220200_0002080280000202_0080000000820020_0808820008220A08_2200080000002088_0002820800080080_0800200800000028_0080282000002080_2020000000080002_0020820008028820_200A00208A000200_20A0080022000000_0220000208808000_8208000200002002_0020082080000082_0008800800228200_2088200200080008_0880800800000020_0A20000000000000_A008000200208082_00008000800A0080_0808208800800800_0002288000000008_0000022080800000_0000000208200000_2002208000200002_2002020802800002_8800800820800000_800000A080002200_0020880800020002_0200000020008820_2082008280282000_0080800802020020_0020808020800000_8088080000008088_0080000020020800_8020000200A08800_0000002008088000_0802002000802880_8000A00008220020_2000000000080282_2802020080802000_0A20000820008208_820200800000008A_0000880000020002_0800820000200A20_0080080002082008_0082002000080080_8000800028020208_028808200020A000_28008020000A0802_0000028220008000_0000002000000000_2822800080000000_0200020800008000_2282200088008202_00200000A0800800_0220208200800220_0000008200000008_0020002080800000_0800228800008820_8000000000080202_0080802020800080_0028008000A00000_0008000000200008_2800000082020802_0008008000A00828_8200280202002088_2022080000800082_0000800200200008_020A20000A000202_2800000022000020_0800008200028020_2008008000080008_2000020080000022_0200800028200820_000820000008800A_0882002800802080_0200800200200200_0288280082002008_0002022002080820_8000200820200000_8080088008088080_2002880000022000_8228020800020000_0000002080200002_00A0000082080820_0020208008020020_0202000088000002_0080020800002802_0008020820000020_0002288082008202_0800800020080080_0A00008020800800_A08000020A200000_08008208000A0000_0000000020800000_0000000200082280_0022000000822882_0028000800000020_0280200088008202_0020000802000800_8820800008028008_0208000008200002_0000000800822020_0200208808020A00_2008280000088000_00000020000A0020_0800008200020008_208000028A000008_00800000200008A0_0808020200008020_808208000A000080_00208800A0800000_0020820000828028_008800A002000080_2020000800002002_8200800200808200_A200080208282000_0080022800000080_0800A00820028800_0000000000002200_0082800800002000_0000820000220808_0080002200008082_08000028000A0020_8000228020A00800_0202008000008000_00008220208A2002_8028220208000800_2202000080208080_2022000000080022_0800800200008228_800A002080200280_0000000080000080_0808808028000200_A000000082080008_0802800022002020_8020008208800A00_200028200020A000_0080002000000882_8000000A20208808_000020000000A208_0020800000002080_0200200A08000808_220A000002280000_0882080080080000_0A00208028020000_220A08820020008A_00208A0000000022_0800220000200800_A08020008000A000_00A0000802082020_8A08000028000208_0080202008200000_0000000800080802_0008028000000200_008200000A000080_20028A0000080080_0008820208000800_0082000080208000_08A0080022800002_0220200000000000_0000002288080000_2000022082800800_0000208808228020_808800000220A200_00828808000A0000_0008028020800800_8200082000000082_0800002022080000_8000200200A00828_0280200202080000_2020082000000080_0208820200208020_0208208000000002_00020000A2000802_0020200228000028_0002000088000008_00A0000080000820_0008820800200000_A008200200008008_0820082002020000_0A20008220820A00_0080080080002000_2800002080000080_0800008220000000_0282088008002200_0800080020000002_8200200008200000_000800A080000202_2000080080082022_8000000208800000_2000080200002008_2020800802802880_0008000808208000_8082008000200008_0800802002820080_0820800208020A08_0000200000200088_00000208A2020000_0008000200200020_8200202000008088_0800082000022080_0220000800828000_0208008082008000_20A2020800882800_8820800828008028_2200002200082000_2000800080822000_0A08020800000000_A000000080280202_08A0000000000020_0808020000A00008_008000000800A00A_0082002002080000_8808000220008000_820208A00000A000_2020080000000880_0008820208828008_208800A08A200000_00220A0002000020_8000800208000000_A000000080280280_0020000082800002_0200208800028020_0000008200000202_00000008000A2080_0820028000000800_2080080000000080_0080002880080022_0828000800800208_0002082000008288_0000820000802802_8000A00200820020_2002000082000080_00020A0822802820_8A00200000820208_0000002080002002_2000080000020022_0200800008020020_8082008082080008_0020080800022020_0220000008A00A00_2008000208002082_0802020020000082_8808000800000020_020020220008A000_2002000080882800_8200800200020800_0282000008000282_0000080880082020_0020008020008208_020008820020020A_00208A0002000022_0008000000000000_A08220808000800A_0000800020802020_8800020028A00000_0000202088202008_00000020800A0802_0800008220800200_8002000200002280_00200000200A0880_0200800008A00800_0200200008088200_0020020082002000_8800200020000020_0208082080080000_0080800800020000_0800008800208020_2008000202200000_0880002820800080_0828008000020200_2000000002000000_0880802080000820_0028020000800220_0202288208082080_2002080020880082_0200220800200000_020020A008208082_2002000002880820_0200200020820208_A000008000000280_20A0800000022880_0208820020008A20_200A080000200200_0002000800800080_0200008000000A00_2000082082008002_2800802000080000_0800020A20200020_8080008008002000_08008200808A2002_8028220808020000_200A000082000200_0820000020802820_0000000208800008_8202000080280082_20200A0800802000_0808A00028200000_000028800020A008_00008020000A0020_0020820200000200_2080200280002080_00000008800808A2_8008008000200000_000220000800A208_00220800A0002800_8208800800A08800_2008208002000200_0082020000800020_0200808808028000_2200088008002080_20800A0080020020_0008020020028000_0002280280280202_08A00000020A2000_8828820008000000_020008008220808A_00000008200008A2_0000000820200000_8000082008000288_0802082020880002_0008200200000828_000000808A280200_00A0000880080802_0200008A00808200_0202000000000280_0020002800822880_0800A00800200200_0080000280080008_00820000000800A0_8020020028000008_A00000000A008000_08808220000200A2_0820208800000200_8000202002000280_0800020000822002_0028800208220820_0200008080088000_20A0080022800820_0A00200200808200_000A00000820200A_0000082002020002_0008828008008020_200A008200002000_0000000002082000_8208008200A00800_000820020820A082_00820228A2000800_8828200000000020_0080202002000208_0802002080082880_0000A00008200028_0002000000008282_2000080020800022_0200000820008008_000000A280080000_0020080000800000_0008220800200020_2080080082002008_0080802000002000_0200000208800000_020028000A200080_2002000022080882_0800200220000808_8002002002000288_2002800020022800_0220820800808020_0200002080288280_0002020020002802_8A00000020000028_220800A00008020A_00A0800802000080_0800A00800008000_A080000200280202_00020800000A0020_0A00000008800200_A000282200008008_00008020020A0820_8800020800800A00_0202288200008080_2020822000082800_0000020000808000_028800A080008080_0002000820080820_0020000020820228_2008000208280008_00008208820000A0_0208808000000800_A080080000080000_0880082002000000_8828000200220A00_0280080088000000_2082020800020080_0000208220000028_8002082208000000_20020A0020082000_8000200000020800_220000A082000002_2880000000002800_8000808208800228_A200000200000082_0080002800800002_0008820820028220_0008000000008202_0820880020820020_0A28800000000008_808820028A002008_00820000A0020080_8020008000800220_0002082008088008_0020020080822002_8020000A00820808_028020A088000202_0802000082080020_0200200A08020008_2008082200202000_0080022000000080_0200208808020800_0002088080280008_0800882020002000_8808808208220808_2200080008002002_2000822820000002_8000000A20A08220_0080008002008000_2002802080880882_0028000200000820_008A000080200200_00000A0800002000_8020000220008220_800000000800008A_0080020800022000_0A00A00000008800_000028020208A000_08A20008000200A0_0000808020200008_A08000020A00A002_2882802000020002_0808200020800200_8002000200080200_0800802020820802_0000220800A00020_008000000A088002_2002080000080802_0200200A00000008_8208088088000082_0020882000000080_0208220000028A00_0088208082002000_08A0880822000000_0020020020A00200_8080200008200088_0002020082020000_8008208220000828_0200208202000208_2800802080820880_8200020800220020_220200800A200000_0880020800002002_0220208028028008_000808200000000A_2020800000822822_0000028000020A20_000008800008200A_0082002820880020_8200800008800000_828820208200208A_00000000800800A0_0028020220000200_0002002200002208_08000000A0000080_8000820A08008800_0088200080080082_0080020002800002_0220800800808200_2208088000002000_2000022802802000_0800A20000208800_A00A008000080000_0802080820002020_0A00000020800A08_0008282080208000_0000802020080002_0008220800A00008_8000088208008088_0020822020000080_8000000A00020028_008020008A200002_2800000080800002_0020008228020200_A002000288082088_0000800800020022_0208808028200000_8088280080282000_00A0000002800000_0020800020200A08_000820008800800A_0800822002080800_8820028000208820_028000020200A000_20020800A0882002_0008000000008808_2002008002080082_08A00000A2802820_0820800208000020_A20008808000200A_2000020002800820_0208800820200220_8002208000208008_00000808020A0020_0028828000000A08_0080202208000000_20800008A00200A0_8028008800008800_0202082208008208_0822022020800082_0028800200A00020_200800008A008202_0020000000082000_8800A08800000028_0202080200000200_2080022880022080_0008228028020000_8008088200080000_0820802022820020_0820008000020A00_020000000800A002_20808008200008A2_0800200200208200_000220000000A200_2000882000880882_0220000208800020_008800A082200280_2822020820080802_8220000A08000200_0208000200000200_00A0002802002802_0008000000208820_2008288002080200_0080800002820020_8000008020020008_8008082002208082_0882802800000020_8808000800A08200_0202288000080280_28000A0000022000_8020A00A00820028_2000200008008080_00220A0802880002_0200000008020220_000A000008200000_2020082082820082_0208208028008020_A082008000202208_08A0000020080080_8028020200200A00_8208002088202000_0880000820000002_0008008800008200_028028220A088008_2020820080880000_0020A20000208020_220800200A288280_0080000000802022_0820000008828008_A00008A08000020A_20800A2080820820_0000008800200800_2082000282002000_0022880002002020_0808800208000000_8208280082200008_08008000A00A0882_0800228020808228_0080208002002080_2000000080022002_8228800000808000_220A000080080082_00820A08A0002000_0820808000820028_000008A20800200A_00008208820000A0_0200208000200820_200A008000000202_08028028200A00A0_0A08020000020000_A200082280008008_28008200020A0000_0828208A00200000_800008800A08A088_0002022000802880_0200A00008220008_0282000008208080_2022080022800800_0820808220800200_A00800A008282280_20800808000028A2_0200020000208000_A00028028008800A_0882082800000080_0A28000020220208_0088200288000002_0002802000020880_0820020220008808_028000000A082200_0800802020820080_8000220808220008_000A20A002008002_20200A0082880822_8820808A00800200_2202000280080000_20A0880802000080_0000220808008220_008208008220A208_00208828200000A0_0220820228000808_A000202088000008_00020200A20A0002_8008028A00208020_008028020808A208_08200000A0002800_0208200200A28820_0080008080080200_2882000082082020_0A00200A20000028_8200002008282282_2000880880822080_0808008008228A00_8008288082288002_0080002020820000_0000828008A20A08_A00008020020A082_2002020820080802_8000020820208228_800020A00A008280_2822002080820880_0208220200808800_008A20008A200080_28A00A0020080022_0220808820808020_200808220028208A_00800A2082820802_0A08200820000A00_208808808008A202_0882802802022020_8820808228020800_228800200A20A082_08028228800800A2_8028208820A00A08_800228A202088288_28208A20A08A28AC;
        nqp::hllbool(
          nqp::isge_I(self,2)
            && (nqp::islt_I(self,100000)
                 ?? nqp::bitand_I(nqp::bitshiftr_I(bits,self,Int),1,Int)
                 !! nqp::isprime_I(self,100)
               )
        )
    }

    method floor(Int:D:) { self }
    method ceiling(Int:D:) { self }
    proto method round(|) {*}
    multi method round(Int:D:) { self }
    multi method round(Int:D: Real(Cool) $scale --> Real:D) {
        (self / $scale + 1/2).floor * $scale
    }

    method lsb(Int:D: --> Int:D) {
        nqp::unless(
          self, # short-circuit `0`, as it doesn't have any bits set…
          Nil,  # … and the algo we'll use requires at least one that is.
          nqp::stmts(
            (my int $lsb),
            (my $x := nqp::abs_I(self, Int)),
            nqp::while( # "fast-forward": shift off by whole all-zero-bit bytes
              nqp::isfalse(nqp::bitand_I($x, 0xFF, Int)),
              nqp::stmts(
                ($lsb += 8),
                ($x := nqp::bitshiftr_I($x, 8, Int)))),
            nqp::while( # our lsb is in the current byte; shift off zero bits
              nqp::isfalse(nqp::bitand_I($x, 0x01, Int)),
              nqp::stmts(
                ++$lsb,
                ($x := nqp::bitshiftr_I($x, 1, Int)))),
            $lsb)) # we shifted enough to get to the first set bit
    }

    method msb(Int:D: --> Int:D) {
        nqp::unless(
          self,
          Nil,
          nqp::if(
            nqp::iseq_I(self, -1),
            0,
            nqp::stmts(
              (my int $msb),
              (my $x := self),
              nqp::islt_I($x, 0) # handle conversion of negatives
                && ($x := nqp::mul_I(-2,
                  nqp::add_I($x, 1, Int), Int)),
              nqp::while(
                nqp::isgt_I($x, 0xFF),
                nqp::stmts(
                  ($msb += 8),
                  ($x := nqp::bitshiftr_I($x, 8, Int)))),
              nqp::isgt_I($x, 0x0F)
                && ($msb += 4) && ($x := nqp::bitshiftr_I($x, 4, Int)),
                 nqp::bitand_I($x, 0x8, Int) && ($msb += 3)
              || nqp::bitand_I($x, 0x4, Int) && ($msb += 2)
              || nqp::bitand_I($x, 0x2, Int) && ($msb += 1),
              $msb)))
    }

    method narrow(Int:D:) { self }

    method Range(Int:U: --> Range:D) {
        given self {
            when int  { $?BITS == 64 ??  int64.Range !!  int32.Range }
            when uint { $?BITS == 64 ?? uint64.Range !! uint32.Range }

            when int64  { Range.new(-9223372036854775808, 9223372036854775807) }
            when int32  { Range.new(         -2147483648, 2147483647         ) }
            when int16  { Range.new(              -32768, 32767              ) }
            when int8   { Range.new(                -128, 127                ) }
            # Bring back in a future Raku version, or just put on the type object
            #when int4   { Range.new(                  -8, 7                  ) }
            #when int2   { Range.new(                  -2, 1                  ) }
            #when int1   { Range.new(                  -1, 0                  ) }

            when uint64 { Range.new( 0, 18446744073709551615 ) }
            when uint32 { Range.new( 0, 4294967295           ) }
            when uint16 { Range.new( 0, 65535                ) }
            when uint8  { Range.new( 0, 255                  ) }
            when byte   { Range.new( 0, 255                  ) }
            # Bring back in a future Raku version, or just put on the type object
            #when uint4  { Range.new( 0, 15                   ) }
            #when uint2  { Range.new( 0, 3                    ) }
            #when uint1  { Range.new( 0, 1                    ) }

            default {  # some other kind of Int
                .^name eq 'UInt'
                  ?? Range.new(    0, Inf, :excludes-max )
                  !! Range.new( -Inf, Inf, :excludes-min, :excludes-max )
            }
        }
    }

    my $nuprop := nqp::null;
    my $deprop := nqp::null;
    method unival(Int:D:) {
        my str $de = nqp::getuniprop_str(
          self,
          nqp::ifnull(
            $deprop,
            $deprop := nqp::unipropcode("Numeric_Value_Denominator")
          )
        );
        nqp::if(
          nqp::chars($de),
          nqp::if(                                    # some string to work with
            nqp::iseq_s($de,"NaN"),
            NaN,                                       # no value found
            nqp::stmts(                                # value for denominator
              (my str $nu = nqp::getuniprop_str(
                self,
                nqp::ifnull(
                  $nuprop,
                  $nuprop := nqp::unipropcode("Numeric_Value_Numerator")
                )
              )),
              nqp::if(
                nqp::iseq_s($de,"1"),
                nqp::atpos(nqp::radix(10,$nu,0,0),0),   # just the numerator
                Rat.new(                                # spotted a Rat
                  nqp::atpos(nqp::radix(10,$nu,0,0),0),
                  nqp::atpos(nqp::radix(10,$de,0,0),0)
                )
              )
            )
          ),
          Nil                                          # no string, so no value
        )
    }
}

multi sub prefix:<++>(Int:D $a is rw --> Int:D) {
    $a = nqp::add_I(nqp::decont($a), 1, Int);
}
multi sub prefix:<++>(int $a is rw --> int) {
    $a = nqp::add_i($a, 1);
}
multi sub prefix:<-->(Int:D $a is rw --> Int:D) {
    $a = nqp::sub_I(nqp::decont($a), 1, Int);
}
multi sub prefix:<-->(int $a is rw --> int) {
    $a = nqp::sub_i($a, 1);
}
multi sub postfix:<++>(Int:D $a is rw --> Int:D) {
    my \b := nqp::decont($a);
    $a = nqp::add_I(b, 1, Int);
    b
}
multi sub postfix:<++>(int $a is rw --> int) {
    my int $b = $a;
    $a = nqp::add_i($b, 1);
    $b
}
multi sub postfix:<-->(Int:D $a is rw --> Int:D) {
    my \b := nqp::decont($a);
    $a = nqp::sub_I(b, 1, Int);
    b
}
multi sub postfix:<-->(int $a is rw --> int) {
    my int $b = $a;
    $a = nqp::sub_i($b, 1);
    $b
}

multi sub prefix:<->(Int:D \a --> Int:D) {
    nqp::neg_I(nqp::decont(a), Int);
}
multi sub prefix:<->(int $a --> int) {
    nqp::neg_i($a)
}

multi sub abs(Int:D \a --> Int:D) {
    nqp::abs_I(nqp::decont(a), Int);
}
multi sub abs(int $a --> int) {
    nqp::abs_i($a)
}

multi sub infix:<+>(Int:D \a, Int:D \b --> Int:D) {
    nqp::add_I(nqp::decont(a), nqp::decont(b), Int);
}
multi sub infix:<+>(int $a, int $b --> int) {
    nqp::add_i($a, $b)
}

multi sub infix:<->(Int:D \a, Int:D \b --> Int:D) {
    nqp::sub_I(nqp::decont(a), nqp::decont(b), Int);
}
multi sub infix:<->(int $a, int $b --> int) {
    nqp::sub_i($a, $b)
}

multi sub infix:<*>(Int:D \a, Int:D \b --> Int:D) {
    nqp::mul_I(nqp::decont(a), nqp::decont(b), Int);
}
multi sub infix:<*>(int $a, int $b --> int) {
    nqp::mul_i($a, $b);
}

multi sub infix:<eqv>(Int:D $a, Int:D $b --> Bool:D) {
    nqp::hllbool(  # need to check types as enums such as Bool wind up here
      nqp::eqaddr($a.WHAT,$b.WHAT) && nqp::iseq_I($a,$b)
    )
}
multi sub infix:<eqv>(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::iseq_i($a,$b))
}

multi sub infix:<div>(Int:D \a, Int:D \b --> Int:D) {
    b
      ?? nqp::div_I(nqp::decont(a), nqp::decont(b), Int)
      !! Failure.new(X::Numeric::DivideByZero.new(:using<div>, :numerator(a)))
}
multi sub infix:<div>(int $a, int $b --> int) {
    # relies on opcode or hardware to detect division by 0
    nqp::div_i($a, $b)
}

multi sub infix:<%>(Int:D \a, Int:D \b --> Int:D) {
    nqp::if(
      nqp::isbig_I(nqp::decont(a)) || nqp::isbig_I(nqp::decont(b)),
      nqp::if(
        b,
        nqp::mod_I(nqp::decont(a),nqp::decont(b),Int),
        Failure.new(X::Numeric::DivideByZero.new(:using<%>, :numerator(a)))
      ),
      nqp::if(
        nqp::isne_i(b,0),
        nqp::mod_i(    # quick fix https://github.com/Raku/old-issue-tracker/issues/4999
          nqp::add_i(nqp::mod_i(nqp::decont(a),nqp::decont(b)),b),
          nqp::decont(b)
        ),
        Failure.new(X::Numeric::DivideByZero.new(:using<%>, :numerator(a)))
      )
    )
}
multi sub infix:<%>(int $a, int $b --> int) {
    # relies on opcode or hardware to detect division by 0
    nqp::mod_i(nqp::add_i(nqp::mod_i($a,$b),$b),$b) # quick fix https://github.com/Raku/old-issue-tracker/issues/4999
}

multi sub infix:<%%>(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::iseq_i(nqp::mod_i($a, $b), 0))
}

multi sub infix:<**>(Int:D \a, Int:D \b --> Real:D) {
    my $power := nqp::pow_I(nqp::decont(a), nqp::decont(b >= 0 ?? b !! -b), Num, Int);
    # when a**b is too big nqp::pow_I returns Inf
    nqp::istype($power, Num)
        ?? Failure.new(
            b >= 0 ?? X::Numeric::Overflow.new !! X::Numeric::Underflow.new
        ) !! b >= 0 ?? $power
            !! ($power := 1 / $power) == 0 && a != 0
                ?? Failure.new(X::Numeric::Underflow.new)
                    !! $power;
}

multi sub infix:<**>(int $a, int $b --> int) {
    nqp::pow_i($a, $b);
}

multi sub infix:<lcm>(Int:D \a, Int:D \b --> Int:D) {
    nqp::lcm_I(nqp::decont(a), nqp::decont(b), Int);
}
multi sub infix:<lcm>(int $a, int $b --> int) {
    nqp::lcm_i($a, $b)
}

multi sub infix:<gcd>(Int:D \a, Int:D \b --> Int:D) {
    nqp::gcd_I(nqp::decont(a), nqp::decont(b), Int);
}
multi sub infix:<gcd>(int $a, int $b --> int) {
    nqp::gcd_i($a, $b)
}

multi sub infix:<===>(Int:D $a, Int:D $b --> Bool:D) {
    nqp::hllbool(
      nqp::eqaddr($a.WHAT,$b.WHAT)
      && nqp::iseq_I($a, $b)
    )
}
multi sub infix:<===>(int $a, int $b --> Bool:D) {
    # hey, the optimizer is smart enough to figure that one out for us, no?
    $a == $b
}

multi sub infix:<==>(Int:D \a, Int:D \b --> Bool:D) {
    nqp::hllbool(nqp::iseq_I(nqp::decont(a), nqp::decont(b)))
}
multi sub infix:<==>(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::iseq_i($a, $b))
}

multi sub infix:<!=>(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::isne_i($a, $b))
}
multi sub infix:<!=>(Int:D \a, Int:D \b --> Bool:D) {
    nqp::hllbool(nqp::isne_I(nqp::decont(a), nqp::decont(b)))
}

multi sub infix:«<»(Int:D \a, Int:D \b --> Bool:D) {
    nqp::hllbool(nqp::islt_I(nqp::decont(a), nqp::decont(b)))
}
multi sub infix:«<»(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::islt_i($a, $b))
}

multi sub infix:«<=»(Int:D \a, Int:D \b --> Bool:D) {
    nqp::hllbool(nqp::isle_I(nqp::decont(a), nqp::decont(b)))
}
multi sub infix:«<=»(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::isle_i($a, $b))
}

multi sub infix:«>»(Int:D \a, Int:D \b --> Bool:D) {
    nqp::hllbool(nqp::isgt_I(nqp::decont(a), nqp::decont(b)))
}
multi sub infix:«>»(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::isgt_i($a, $b))
}

multi sub infix:«>=»(Int:D \a, Int:D \b --> Bool:D) {
    nqp::hllbool(nqp::isge_I(nqp::decont(a), nqp::decont(b)))
}
multi sub infix:«>=»(int $a, int $b --> Bool:D) {
    nqp::hllbool(nqp::isge_i($a, $b))
}

multi sub infix:<+|>(Int:D \a, Int:D \b --> Int:D) {
    nqp::bitor_I(nqp::decont(a), nqp::decont(b), Int)
}
multi sub infix:<+|>(int $a, int $b --> int) {
   nqp::bitor_i($a, $b)
}

multi sub infix:<+&>(Int:D \a, Int:D \b --> Int:D) {
    nqp::bitand_I(nqp::decont(a), nqp::decont(b), Int)
}
multi sub infix:<+&>(int $a, int $b --> int) {
   nqp::bitand_i($a, $b)
}

multi sub infix:<+^>(Int:D \a, Int:D \b --> Int:D) {
    nqp::bitxor_I(nqp::decont(a), nqp::decont(b), Int)
}
multi sub infix:<+^>(int $a, int $b --> int) {
   nqp::bitxor_i($a, $b);
}

multi sub infix:«+<»(Int:D \a, Int:D \b --> Int:D) {
    nqp::bitshiftl_I(nqp::decont(a), nqp::unbox_i(b), Int)
}
multi sub infix:«+<»(int $a, int $b --> int) {
   nqp::bitshiftl_i($a, $b);
}

multi sub infix:«+>»(Int:D \a, Int:D \b --> Int:D) {
    nqp::bitshiftr_I(nqp::decont(a), nqp::unbox_i(b), Int)
}
multi sub infix:«+>»(int $a, int $b --> int) {
   nqp::bitshiftr_i($a, $b)
}

multi sub prefix:<+^>(Int:D \a --> Int:D) {
    nqp::bitneg_I(nqp::decont(a), Int);
}
multi sub prefix:<+^>(int $a --> int) {
   nqp::bitneg_i($a);
}

proto sub chr($, *%) is pure  {*}
multi sub chr(Int:D  \x --> Str:D) { x.chr        }
multi sub chr(Cool \x   --> Str:D) { x.Int.chr    }
multi sub chr(int $x    --> str)   { nqp::chr($x) }

proto sub is-prime($, *%) is pure {*}
multi sub is-prime(\x --> Int:D) { x.is-prime }

proto sub expmod($, $, $, *%) is pure  {*}
multi sub expmod(Int:D \base, Int:D \exp, Int:D \mod --> Int:D) {
    nqp::expmod_I(nqp::decont(base), nqp::decont(exp), nqp::decont(mod), Int);
}
multi sub expmod(\base, \exp, \mod --> Int:D) {
    nqp::expmod_I(nqp::decont(base.Int), nqp::decont(exp.Int), nqp::decont(mod.Int), Int);
}

proto sub lsb($, *%) {*}
multi sub lsb(Int:D \i --> Int:D) { i.lsb }

proto sub msb($, *%) {*}
multi sub msb(Int:D \i --> Int:D) { i.msb }

# vim: expandtab shiftwidth=4
