#include "pmc_perl6lexinfo.h"
#include "../binder/sixmodelobject.h"
#include "../binder/container.h"
#include "../binder/bind.h"
#include "pmc_sub.h"

/* How StatixLexPad looks on the inside. */
typedef struct {
    PMC    *st;                 /* S-table, though we don't care about that here. */
    PMC    *sc;                 /* Serialization context, though we don't care about that here. */
    PMC    *static_values;      /* The set of static values (hash names => values). */
    PMC    *flags;              /* Flags for how we handle those (hash names => flags). */
    INTVAL  changed;            /* Has anything in here changed since we last saw it? */
    INTVAL  fresh_magicals;     /* Does this block get fresh magicals? */
} Rakudo_StaticLexPad;

/* Some useful types/container descriptors we like to have to hand. */
static PMC *topic_cd = NULL;
static PMC *error_cd = NULL;
static PMC *match_cd = NULL;
static PMC *Scalar   = NULL;
static PMC *Any      = NULL;
static PMC *EnumMap  = NULL;
static PMC *_Hash    = NULL;
static PMC *Block    = NULL;

/* Creates a fresh scalar container with the specified descriptor. */
static PMC * fresh_scalar(PARROT_INTERP, PMC *cont_desc) {
    STable *st          = STABLE(Scalar);
    PMC *fresh          = st->REPR->allocate(interp, st);
    Rakudo_Scalar *cont = (Rakudo_Scalar *)PMC_data(fresh);
    st->REPR->initialize(interp, st, OBJECT_BODY(fresh));
    cont->descriptor    = cont_desc;
    cont->value         = Any;
    PARROT_GC_WRITE_BARRIER(interp, fresh);
    return fresh;
}

/* Finds the given name in our outer lexpad. */
static PMC * steal_outer(PARROT_INTERP, PMC *cur_ctx, STRING *name) {
    PMC *outer_ctx = Parrot_pcc_get_outer_ctx(interp, cur_ctx);
    PMC *outer_pad = PMC_IS_NULL(outer_ctx) ? PMCNULL :
        Parrot_pcc_get_lex_pad(interp, outer_ctx);
    return PMC_IS_NULL(outer_pad) ? PMCNULL :
        VTABLE_get_pmc_keyed_str(interp, outer_pad, name);
}

/* Locates the register number for getting the specified name
 * and type of lexical. */
static INTVAL register_number_for_get(PARROT_INTERP, Hash *hash,
        STRING *name, INTVAL reg_type) {
    HashBucket *b = Parrot_hash_get_bucket(interp, hash, name);
    if (!b)
        return -1;
    if (((INTVAL)b->value & 3) != reg_type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' is of wrong register type in lexical lookup", name);

    return ((INTVAL)b->value) >> 2;
}

/* Locates the register number for setting the specified name
 * and type of lexical. */
static INTVAL register_number_for_set(PARROT_INTERP, Hash *hash,
        STRING *name, INTVAL reg_type) {
    HashBucket *b = Parrot_hash_get_bucket(interp, hash, name);
    if (!b)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' not found", name);
    if (((INTVAL)b->value & 3) != reg_type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' is of wrong register type in lexical lookup", name);

    return ((INTVAL)b->value) >> 2;
}

pmclass Perl6LexPad
    provides hash
    auto_attrs
    dynpmc group perl6
    hll perl6
    maps LexPad
{
    /* The static lexical info. */
    ATTR PMC *lexinfo;
    
    /* Cache of the hash from the static lex info, so we needn't look it up
     * every time. */
    ATTR Hash *lexinfo_hash;
    
    /* The current context, including the registers. */
    ATTR PMC *ctx;
    
    /* For %_ we rarely need it, but methods always want to collect it by default.
     * We can't really statically eliminate it, but we can make sure we only create
     * it on demand. This contains a Parrot hash by default, or NULL if there's no
     * named args. The binder sets it, and it'll magically become initialized to
     * a Perl 6 hash if accessed. */
    ATTR PMC *default_named_slurpy;

    VTABLE void init() {
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
            "Cannot create a Perl6LexPad PMC without an initializer");
    }

/*

=item C<init_pmc(PMC *lexinfo)>

Initialize the LexPad PMC and remember the associate
lexinfo.

=item C<void set_pointer(void *)>

Associate the context, and set into it any static entries.

=item C<INTVAL elements()>

Returns the number of elements in the hash.

=item C<INTVAL exists_keyed(PMC *name)>

=item C<INTVAL exists_keyed_str(STRING *name)>

Returns whether a lexical C<name> exists in the hash.

=item C<PMC *get_pmc_keyed_str(STRING *name)>

=item C<PMC *get_pmc_keyed(PMC *name)>

Return the lexical with the given name, or NULL (not PMCNULL), if the
lexical doesn't exist.

=item C<void set_pmc_keyed(PMC *name, PMC *value)>

=item C<void set_pmc_keyed_str(STRING *name, PMC *value)>

Set the lexical with the given name to value. If the lexical name
doesn't exist, it is created.

=item C<PMC *get_lexinfo()>

Return the LexInfo PMC, if any or a Null PMC.

=cut

*/
    VTABLE void init_pmc(PMC *lexinfo) {
        SET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        PObj_custom_mark_SET(SELF);
    }
    
    VTABLE void mark() {
        PMC *lexinfo, *ctx, *default_named_slurpy;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        GET_ATTR_default_named_slurpy(INTERP, SELF, default_named_slurpy);
        Parrot_gc_mark_PMC_alive(INTERP, lexinfo);
        Parrot_gc_mark_PMC_alive(INTERP, ctx);
        Parrot_gc_mark_PMC_alive(INTERP, default_named_slurpy);
    }

    VTABLE void set_pointer(void *ctx) {
        PMC *info;
        Hash *hash;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        if (info->vtable->base_type != enum_class_LexInfo) {
            PMC *name_map;
            GETATTR_Perl6LexInfo_name_to_register_map(INTERP, info, name_map);
            hash = (Hash *)VTABLE_get_pointer(INTERP, name_map);
        }
        else {
            hash = (Hash *)VTABLE_get_pointer(INTERP, info);
        }
        SET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        
        /* Stash the context pointer and hash. */
        SET_ATTR_ctx(INTERP, SELF, (PMC *)ctx);
        
        /* Static lexpad handling. */
        if (info->vtable->base_type != enum_class_LexInfo) {
            /* Get static lexpad, provided we have one to hand. If there's none,
             * we're done here. */
            PMC *static_lexpad_pmc, *static_slots_cache;
            Rakudo_StaticLexPad *static_lexpad;
            GETATTR_Perl6LexInfo_static_lexpad(INTERP, info, static_lexpad_pmc);
            if (PMC_IS_NULL(static_lexpad_pmc))
                return;
            GETATTR_Perl6LexInfo_static_slots_cache(INTERP, info, static_slots_cache);
            static_lexpad = (Rakudo_StaticLexPad *)PMC_data(static_lexpad_pmc);
            
            /* Compute the caches if needed. */
            if (static_lexpad->changed || PMC_IS_NULL(static_slots_cache)) {
                /* (Re-)build caches. */
                INTVAL fresh_magicals = static_lexpad->fresh_magicals;
                PMC *slots       = Parrot_pmc_new(interp, enum_class_ResizableIntegerArray);
                PMC *values      = Parrot_pmc_new(interp, enum_class_ResizablePMCArray);
                PMC *clone_flags = Parrot_pmc_new(interp, enum_class_ResizableIntegerArray);
                PMC *state_flags = Parrot_pmc_new(interp, enum_class_ResizableStringArray);
                PMC *iter        = VTABLE_get_iter(interp, static_lexpad->static_values);
                while (VTABLE_get_bool(interp, iter)) {
                    STRING *name  = VTABLE_shift_string(interp, iter);
                    INTVAL  slot  = VTABLE_get_integer_keyed_str(interp, info, name);
                    PMC    *value = VTABLE_get_pmc_keyed_str(interp, static_lexpad->static_values, name);
                    INTVAL  flags = VTABLE_get_integer_keyed_str(interp, static_lexpad->flags, name);
                    INTVAL  clone = flags & 1;
                    INTVAL  state = flags & 2;
                    VTABLE_push_integer(interp, slots, slot);
                    VTABLE_push_pmc(interp, values, value);
                    VTABLE_push_integer(interp, clone_flags, clone);
                    VTABLE_push_string(interp, state_flags, state ? name : STRINGNULL);
                }
                SETATTR_Perl6LexInfo_static_slots_cache(INTERP, info, slots);
                SETATTR_Perl6LexInfo_static_values_cache(INTERP, info, values);
                SETATTR_Perl6LexInfo_static_clone_flags_cache(INTERP, info, clone_flags);
                SETATTR_Perl6LexInfo_state_flags_cache(INTERP, info, state_flags);
                SETATTR_Perl6LexInfo_fresh_magicals(INTERP, info, fresh_magicals);
                static_slots_cache = slots;
                
                /* Clear changed flag. */
                static_lexpad->changed = 0;
                
                /* We updated the LexInfo, so need to write-barrier it. */
                PARROT_GC_WRITE_BARRIER(INTERP, info);
            }
            
            /* Provided we got a cache built, go through it. */
            if (!PMC_IS_NULL(static_slots_cache)) {
                /* Yes, we have some. Grab values too, then iterate. */
                PMC *static_values_cache;
                PMC *static_clone_flags_cache;
                PMC *state_flags_cache;
                INTVAL num_statics = VTABLE_elements(interp, static_slots_cache);
                INTVAL i;
                GETATTR_Perl6LexInfo_static_values_cache(INTERP, info, static_values_cache);
                GETATTR_Perl6LexInfo_static_clone_flags_cache(INTERP, info, static_clone_flags_cache);
                GETATTR_Perl6LexInfo_state_flags_cache(INTERP, info, state_flags_cache);
                for (i = 0; i < num_statics; i++) {
                    INTVAL  slot  = VTABLE_get_integer_keyed_int(interp, static_slots_cache, i);
                    PMC    *value = VTABLE_get_pmc_keyed_int(interp, static_values_cache, i);
                    INTVAL  clone = VTABLE_get_integer_keyed_int(interp, static_clone_flags_cache, i);
                    STRING *state = VTABLE_get_string_keyed_int(interp, state_flags_cache, i);
                    if (!STRING_IS_NULL(state)) {
                        /* See if we have some state storage. */
                        PMC * sub = Parrot_pcc_get_sub(interp, (PMC *)ctx);
                        PMC * cur_state = PMCNULL;
                        PMC * p6sub, *state_stash;
                        GETATTR_Sub_multi_signature(interp, sub, p6sub);
                        state_stash = VTABLE_get_attr_keyed(interp, p6sub, Block, CONST_STRING(interp, "$!state_vars"));
                        if (PMC_IS_NULL(state_stash)) {
                            state_stash = Parrot_pmc_new(interp, enum_class_Hash);
                            VTABLE_set_attr_keyed(interp, p6sub, Block, CONST_STRING(interp, "$!state_vars"), state_stash);
                            PObj_flag_SET(P6LEXPAD_STATE_INIT, (PMC *)ctx);
                        }
                        else {
                            cur_state = VTABLE_get_pmc_keyed_str(interp, state_stash, state);
                        }
                        if (PMC_IS_NULL(cur_state)) {
                            if (clone) {
                                PMC *cloned = REPR(value)->allocate(interp, STABLE(value));
                                REPR(value)->copy_to(interp, STABLE(value), OBJECT_BODY(value), OBJECT_BODY(cloned));
                                PARROT_GC_WRITE_BARRIER(INTERP, cloned);
                                value = cloned;
                            }
                            VTABLE_set_pmc_keyed_str(interp, state_stash, state, value);
                        }
                        else {
                            value = cur_state;
                        }
                    }
                    else if (clone) {
                        PMC *cloned = REPR(value)->allocate(interp, STABLE(value));
                        REPR(value)->copy_to(interp, STABLE(value), OBJECT_BODY(value), OBJECT_BODY(cloned));
                        PARROT_GC_WRITE_BARRIER(INTERP, cloned);
                        value = cloned;
                    }
                    CTX_REG_PMC(interp, (PMC *)ctx, slot >> 2) = value;
                }
                PARROT_GC_WRITE_BARRIER(INTERP, (PMC *)ctx);
            }
        }
    }

    VTABLE INTVAL elements() {
        PMC *info;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        return VTABLE_elements(interp, info);
    }

    VTABLE INTVAL exists_keyed_str(STRING *name) {
        const Hash *hash;
        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        return hash->entries
            ? (Parrot_hash_get_bucket(INTERP, hash, name) != 0)
            : 0;
    }

    VTABLE INTVAL exists_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.exists_keyed_str(s);
    }

    VTABLE PMC *get_pmc_keyed_str(STRING *name) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;
        PMC    *result;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_PMC);
        if (reg < 0)
            return PMCNULL;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        result = CTX_REG_PMC(interp, ctx, reg);
        
        if (PMC_IS_NULL(result)) {
            /* We lazily handle things like $_, $! and $/. */
            PMC    *info;
            INTVAL  fresh_topic;
            GET_ATTR_lexinfo(INTERP, SELF, info);
            GETATTR_Perl6LexInfo_fresh_magicals(INTERP, info, fresh_topic);
            if (Parrot_str_equal(interp, name, CONST_STRING(interp, "$_"))) {
                result = fresh_topic ? fresh_scalar(interp, topic_cd)
                                        : steal_outer(interp, ctx, name);
            }
            else if (Parrot_str_equal(interp, name, CONST_STRING(interp, "$!"))) {
                result = fresh_scalar(interp, error_cd);
            }
            else if (Parrot_str_equal(interp, name, CONST_STRING(interp, "$/"))) {
                result = fresh_scalar(interp, match_cd);
            }
            else if (Parrot_str_equal(interp, name, CONST_STRING(interp, "%_"))) {
                PMC *storage;
                GET_ATTR_default_named_slurpy(INTERP, SELF, storage);
                result = REPR(_Hash)->allocate(interp, STABLE(_Hash));
                REPR(_Hash)->initialize(interp, STABLE(_Hash), OBJECT_BODY(result));
                if (!PMC_IS_NULL(storage))
                    VTABLE_set_attr_keyed(interp, result, EnumMap, CONST_STRING(interp, "$!storage"), storage);
            }
            VTABLE_set_pmc_keyed_str(interp, SELF, name, result);
        }
        
        return result;
    }
    
    VTABLE INTVAL get_integer_keyed_str(STRING *name) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_INT);
        if (reg < 0)
            return 0;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_INT(interp, ctx, reg);
    }
    
    VTABLE FLOATVAL get_number_keyed_str(STRING *name) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_NUM);
        if (reg < 0)
            return 0.0;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_NUM(interp, ctx, reg);
    }
    
    VTABLE STRING *get_string_keyed_str(STRING *name) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_get(INTERP, hash, name, REGNO_STR);
        if (reg < 0)
            return STRINGNULL;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_STR(interp, ctx, reg);
    }

    VTABLE PMC *get_pmc_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_pmc_keyed_str(s);
    }

    VTABLE INTVAL get_integer_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_integer_keyed_str(s);
    }
    
    VTABLE FLOATVAL get_number_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_number_keyed_str(s);
    }

    VTABLE STRING *get_string_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_string_keyed_str(s);
    }

    VTABLE void set_pmc_keyed_str(STRING *name, PMC *value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_PMC);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_PMC(interp, ctx, reg) = value;
        PARROT_GC_WRITE_BARRIER(INTERP, ctx);
    }
    
    VTABLE void set_integer_keyed_str(STRING *name, INTVAL value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_INT);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_INT(interp, ctx, reg) = value;
    }
    
    VTABLE void set_number_keyed_str(STRING *name, FLOATVAL value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_NUM);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_NUM(interp, ctx, reg) = value;
    }
    
    VTABLE void set_string_keyed_str(STRING *name, STRING *value) {
        Hash *hash;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo_hash(INTERP, SELF, hash);
        reg = register_number_for_set(INTERP, hash, name, REGNO_STR);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_STR(interp, ctx, reg) = value;
        PARROT_GC_WRITE_BARRIER(INTERP, ctx);
    }

    VTABLE void set_pmc_keyed(PMC *name, PMC *value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_pmc_keyed_str(s, value);
    }

    VTABLE void set_integer_keyed(PMC *name, INTVAL value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_integer_keyed_str(s, value);
    }

    VTABLE void set_number_keyed(PMC *name, FLOATVAL value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_number_keyed_str(s, value);
    }

    VTABLE void set_string_keyed(PMC *name, STRING *value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_string_keyed_str(s, value);
    }

    METHOD get_lexinfo() {
        PMC *lexinfo;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        RETURN(PMC *lexinfo);
    }

/*

=item C<PMC *get_iter()>

Get iterator for declared lexicals.

=cut

*/
    VTABLE PMC *get_iter() {
        PMC *lexinfo;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        return VTABLE_get_iter(INTERP, lexinfo);
    }
    
    METHOD configure_magicals(PMC *_topic_cd, PMC *_error_cd, PMC *_match_cd,
                              PMC *_Scalar, PMC *_Any, PMC *_EnumMap, PMC *__Hash,
                              PMC *_Block) {
        topic_cd = _topic_cd;
        error_cd = _error_cd;
        match_cd = _match_cd;
        Scalar   = _Scalar;
        Any      = _Any;
        EnumMap  = _EnumMap;
        _Hash    = __Hash;
        Block    = _Block;
    }

}

/*

=back

=cut

*/
