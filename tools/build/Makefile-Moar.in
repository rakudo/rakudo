M_CC      = @moar::cc@
M_LD      = @moar::ld@
M_CFLAGS  = @moar::cflags@ @moar::ccmiscflags@ @moar::ccoptiflags@ @moar::ccwarnflags@
M_LDFLAGS = @moar::ldflags@ @moar::ldmiscflags@ @moar::ldoptiflags@ @moar::ldlibs@

M_GEN_CAT = tools/build/gen-cat.nqp moar

M_BUILD_DIR = gen/moar

MOAR_PREFIX = @moar::prefix@
MOAR   = @moar::bindir@@slash@moar@exe@
M_NQP  = @m_nqp@
M_LIBDEFPATH = $(PREFIX)@slash@share@slash@nqp@slash@lib
M_LIBPATH = $(LIBDIR)@slash@nqp@slash@lib
M_INCPATH = $(MOAR_PREFIX)@slash@include
NQP_LIBPATH = @nqp::libdir@

M_RUN_PERL6 = @nqp_blib@ $(MOAR) --libpath="$(M_LIBPATH)" --libpath="$(NQP_LIBPATH)" perl6.moarvm --nqp-lib=blib

M_BAT    = @runner_suffix@
M_RUNNER = perl6-m@runner_suffix@

# files we create
PERL6_MOAR     = perl6.moarvm
PERL6_ML_MOAR  = blib/Perl6/ModuleLoader.moarvm
PERL6_W_MOAR   = blib/Perl6/World.moarvm
PERL6_G_MOAR   = blib/Perl6/Grammar.moarvm
PERL6_OPS_MOAR = blib/Perl6/Ops.moarvm
PERL6_A_MOAR   = blib/Perl6/Actions.moarvm
PERL6_O_MOAR   = blib/Perl6/Optimizer.moarvm
PERL6_P_MOAR   = blib/Perl6/Pod.moarvm
PERL6_DP_MOAR  = blib/Perl6/DebugPod.moarvm
PERL6_C_MOAR   = blib/Perl6/Compiler.moarvm
PERL6_M_MOAR   = blib/Perl6/Metamodel.moarvm
PERL6_B_MOAR   = blib/Perl6/BOOTSTRAP.moarvm
SETTING_MOAR   = CORE.setting.moarvm
SETTING_D_MOAR = CORE.d.setting.moarvm
R_SETTING_MOAR = RESTRICTED.setting.moarvm

M_PERL6_OPS_DIR  = dynext
M_PERL6_OPS_DLL  = $(M_PERL6_OPS_DIR)/@perl6_ops_dll@
M_PERL6_OPS_OBJ  = $(M_PERL6_OPS_DIR)/perl6_ops@moar::obj@
M_PERL6_CONT_OBJ = $(M_PERL6_OPS_DIR)/container@moar::obj@
M_PERL6_OPS_SRC  = src/vm/moar/ops/perl6_ops.c
M_PERL6_CONT_SRC = src/vm/moar/ops/container.c

M_PERL6_LANG_OUTPUT = \
    $(PERL6_ML_MOAR) $(PERL6_W_MOAR) $(PERL6_G_MOAR) $(PERL6_OPS_MOAR) \
    $(PERL6_A_MOAR) $(PERL6_O_MOAR) $(PERL6_P_MOAR) $(PERL6_C_MOAR) \
    $(PERL6_M_MOAR) $(PERL6_B_MOAR) $(PERL6_DP_MOAR)

M_METAMODEL_SOURCES = $(COMMON_BOOTSTRAP_SOURCES)

# The ordering here is important for bootstrapping reasons. In general:
# * traits almost certainly have to come first
# * stubs have to come after traits since they use them
# * Attribute needs to come before anything that uses an attribute
# We break various other circularities in Perl6::Metamodel::BOOTSTRAP.
# Note that you only really have to worry especially about things that
# the compiler will instantiate/call methods on while compiling the
# setting - basically anything that feels MOP-ish.
M_CORE_SOURCES = \
	@moar_core_sources@
M_CORE_D_SOURCES = \
	@moar_core_d_sources@

PERL6_DEBUG_MOAR = perl6-debug.moarvm
M_DEBUG_RUNNER = perl6-debug-m@runner_suffix@
M_GDB_RUNNER = perl6-gdb-m@runner_suffix@
M_LLDB_RUNNER = perl6-lldb-m@runner_suffix@
M_VALGRIND_RUNNER = perl6-valgrind-m@runner_suffix@

M_CLEANUPS = \
  *.manifest \
  blib/Perl6/*.moarvm \
  $(SETTING_MOAR) \
  $(SETTING_D_MOAR) \
  $(R_SETTING_MOAR) \
  $(PERL6_MOAR) \
  rakudo_test_run.tar.gz \
  $(M_RUNNER) \
  $(M_PERL6_OPS_DLL) \
  $(M_PERL6_OPS_OBJ) \
  $(M_PERL6_CONT_OBJ) \
  $(M_PERL6_OPS_DLL) \
  $(PERL6_DEBUG_MOAR) \
  $(M_DEBUG_RUNNER) \
  $(M_BUILD_DIR)@slash@*.* \
@m_cleanups@

HARNESS_TYPE = 5

M_HARNESS5 = $(PERL5) t/harness5
M_HARNESS5_WITH_FUDGE = $(M_HARNESS5) --fudge --moar --keep-exit-code

M_HARNESS6 = .@slash@$(M_RUNNER) -Ilib t/harness6
M_HARNESS6_WITH_FUDGE = $(M_HARNESS6) --fudge

M_RUN_CLEAN_TARGET_FILES = $(M_RUN_PERL6) -e "for @*ARGS.head(*-1) { given (@*ARGS[*-1] ~ '/' ~ .IO.basename.Str) { say 'rm -f ' ~ .Str; .IO.unlink if .IO.e } }"

m-all: $(PERL6_MOAR) $(SETTING_MOAR) $(SETTING_D_MOAR) $(R_SETTING_MOAR) $(M_RUNNER) $(PERL6_DEBUG_MOAR) $(M_DEBUG_RUNNER) @m_all@

$(M_PERL6_OPS_DLL): $(M_PERL6_OPS_SRC) $(M_PERL6_CONT_SRC)
	$(M_CC) @moar::ccswitch@ @moar::ccshared@ $(M_CFLAGS) -I$(M_INCPATH)/libatomic_ops \
	    -I$(M_INCPATH)/dyncall -I$(M_INCPATH)/moar \
	    -I$(M_INCPATH)/sha1 -I$(M_INCPATH)/tinymt  -I$(M_INCPATH)/libtommath \
	    -I$(M_INCPATH)/libuv -I$(M_INCPATH) @moar::cincludes@ @moar::ccout@$(M_PERL6_OPS_OBJ) $(M_PERL6_OPS_SRC)
	$(M_CC) @moar::ccswitch@ @moar::ccshared@ $(M_CFLAGS) -I$(M_INCPATH)/libatomic_ops \
	    -I$(M_INCPATH)/dyncall -I$(M_INCPATH)/moar \
	    -I$(M_INCPATH)/sha1 -I$(M_INCPATH)/tinymt  -I$(M_INCPATH)/libtommath \
	    -I$(M_INCPATH)/libuv -I$(M_INCPATH) @moar::cincludes@ @moar::ccout@$(M_PERL6_CONT_OBJ) $(M_PERL6_CONT_SRC)
	$(M_LD) @moar::ldswitch@ -L@moar::libdir@ @moar::ldshared@ $(M_LDFLAGS) @moar::ldout@$(M_PERL6_OPS_DLL) $(M_PERL6_OPS_OBJ) $(M_PERL6_CONT_OBJ) -lmoar @moarimplib@

$(PERL6_ML_MOAR): src/Perl6/ModuleLoader.nqp src/vm/moar/ModuleLoaderVMConfig.nqp
	$(M_NQP) $(M_GEN_CAT) src/vm/moar/ModuleLoaderVMConfig.nqp src/Perl6/ModuleLoader.nqp > $(M_BUILD_DIR)/ModuleLoader.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_ML_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/ModuleLoader.nqp

$(PERL6_OPS_MOAR): src/vm/moar/Perl6/Ops.nqp $(M_PERL6_OPS_DLL)
	$(M_NQP) --target=mbc --output=$(PERL6_OPS_MOAR) --encoding=utf8 \
	    src/vm/moar/Perl6/Ops.nqp

$(PERL6_W_MOAR): $(PERL6_ML_MOAR) $(PERL6_OPS_MOAR) $(PERL6_P_MOAR) src/Perl6/World.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_W_MOAR) --encoding=utf8 \
	    src/Perl6/World.nqp

$(PERL6_P_MOAR): src/Perl6/Pod.nqp $(PERL6_DP_MOAR)
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_P_MOAR) --encoding=utf8 \
	    src/Perl6/Pod.nqp

$(PERL6_DP_MOAR): src/Perl6/DebugPod.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_DP_MOAR) --encoding=utf8 \
	    src/Perl6/DebugPod.nqp

$(PERL6_A_MOAR): src/Perl6/Actions.nqp $(PERL6_P_MOAR) $(PERL6_OPS_MOAR)
	$(M_NQP) $(M_GEN_CAT) src/Perl6/Actions.nqp > $(M_BUILD_DIR)/Perl6-Actions.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_A_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/Perl6-Actions.nqp

$(PERL6_G_MOAR): src/Perl6/Grammar.nqp $(PERL6_W_MOAR) $(PERL6_A_MOAR) $(PERL6_P_MOAR)
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_G_MOAR) --encoding=utf8 \
	    src/Perl6/Grammar.nqp

$(PERL6_O_MOAR): src/Perl6/Optimizer.nqp $(PERL6_OPS_MOAR)
	$(M_NQP) $(M_GEN_CAT) src/Perl6/Optimizer.nqp > $(M_BUILD_DIR)/Perl6-Optimizer.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_O_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/Perl6-Optimizer.nqp

$(PERL6_C_MOAR): src/Perl6/Compiler.nqp $(PERL6_O_MOAR)
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_C_MOAR) --encoding=utf8 \
	    src/Perl6/Compiler.nqp

$(PERL6_MOAR): src/main.nqp $(PERL6_G_MOAR) $(PERL6_A_MOAR) $(PERL6_C_MOAR) $(PERL6_P_MOAR) $(PERL6_DP_MOAR)
	$(PERL5) tools/build/gen-version.pl $(PREFIX) $(LIBDIR) > $(M_BUILD_DIR)/main-version.nqp
	$(M_NQP) $(M_GEN_CAT) src/main.nqp $(M_BUILD_DIR)/main-version.nqp > $(M_BUILD_DIR)/main.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_MOAR) \
	    --vmlibs=$(M_PERL6_OPS_DLL)=Rakudo_ops_init $(M_BUILD_DIR)/main.nqp

$(PERL6_M_MOAR): $(M_METAMODEL_SOURCES) $(PERL6_OPS_MOAR)
	$(M_NQP) $(M_GEN_CAT) -f tools/build/common_bootstrap_sources > $(M_BUILD_DIR)/Metamodel.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_M_MOAR) --encoding=utf8 \
	    $(M_BUILD_DIR)/Metamodel.nqp

$(PERL6_B_MOAR): $(BOOTSTRAP_SOURCES) $(PERL6_M_MOAR)
	$(M_NQP) $(M_GEN_CAT) $(BOOTSTRAP_SOURCES) > $(M_BUILD_DIR)/BOOTSTRAP.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_B_MOAR) --encoding=utf8 \
        --vmlibs=$(M_PERL6_OPS_DLL)=Rakudo_ops_init $(M_BUILD_DIR)/BOOTSTRAP.nqp

$(SETTING_MOAR): $(PERL6_MOAR) $(PERL6_B_MOAR) $(M_CORE_SOURCES)
	$(M_NQP) $(M_GEN_CAT) -f tools/build/moar_core_sources > $(M_BUILD_DIR)/CORE.setting
	@echo "The following step can take a long time, please be patient."
	$(M_RUN_PERL6) --setting=NULL --ll-exception --optimize=3 --target=mbc --stagestats --output=$(SETTING_MOAR) $(M_BUILD_DIR)/CORE.setting

$(SETTING_D_MOAR): $(PERL6_MOAR) $(PERL6_B_MOAR) $(SETTING_MOAR) $(M_CORE_D_SOURCES)
	$(M_NQP) $(M_GEN_CAT) -f tools/build/moar_core_d_sources > $(M_BUILD_DIR)/CORE.d.setting
	@echo "The following step can take a long time, please be patient."
	$(M_RUN_PERL6) --ll-exception --optimize=3 --target=mbc --stagestats --output=$(SETTING_D_MOAR) $(M_BUILD_DIR)/CORE.d.setting

$(R_SETTING_MOAR): $(PERL6_MOAR) $(SETTING_MOAR) $(R_SETTING_SRC) $(SETTING_MOAR)
	$(M_RUN_PERL6) --target=mbc --ll-exception --output=$(R_SETTING_MOAR) $(R_SETTING_SRC)

$(M_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR) $(SETTING_MOAR)
	$(RM_F) $(M_RUNNER)
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-m . "" --nqp-lib=blib "$(M_LIBPATH)" "$(NQP_LIBPATH)" .
	-$(CHMOD) 755 $(M_RUNNER)

m-runner-default: $(M_RUNNER)
	$(RM_F) perl6@runner_suffix@
	-$(CP) $(M_RUNNER) perl6@runner_suffix@
	-$(CHMOD) 755 perl6@runner_suffix@

$(PERL6_DEBUG_MOAR): src/perl6-debug.nqp $(PERL6_MOAR)
	$(M_NQP) $(M_GEN_CAT) src/perl6-debug.nqp $(M_BUILD_DIR)/main-version.nqp > $(M_BUILD_DIR)/perl6-debug.nqp
	$(M_NQP) --module-path=blib --target=mbc --output=$(PERL6_DEBUG_MOAR) \
	    --vmlibs=$(M_PERL6_OPS_DLL)=Rakudo_ops_init $(M_BUILD_DIR)/perl6-debug.nqp

$(M_DEBUG_RUNNER): tools/build/create-moar-runner.pl $(PERL6_DEBUG_MOAR) $(SETTING_MOAR)
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6-debug.moarvm perl6-debug-m . "" --nqp-lib=blib "$(M_LIBPATH)" "$(NQP_LIBPATH)" .

$(M_GDB_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR) $(SETTING_MOAR)
	$(RM_F) $(M_GDB_RUNNER)
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-gdb-m . "gdb" --nqp-lib=blib "$(M_LIBDEFPATH)" "$(M_LIBPATH)" "$(NQP_LIBPATH)" .
	-$(CHMOD) 755 $(M_GDB_RUNNER)

$(M_LLDB_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR) $(SETTING_MOAR)
	$(RM_F) $(M_LLDB_RUNNER)
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-lldb-m . "lldb" --nqp-lib=blib "$(M_LIBPATH)" "$(NQP_LIBPATH)" .
	-$(CHMOD) 755 $(M_LLDB_RUNNER)

$(M_VALGRIND_RUNNER): tools/build/create-moar-runner.pl $(PERL6_MOAR) $(SETTING_MOAR)
	$(RM_F) $(M_VALGRIND_RUNNER)
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm perl6-valgrind-m . "valgrind" --nqp-lib=blib "$(M_LIBPATH)" "$(NQP_LIBPATH)" .
	-$(CHMOD) 755 $(M_VALGRIND_RUNNER)

##  testing targets
m-test    : m-coretest$(HARNESS_TYPE)

m-test5   : m-coretest5

m-test6   : m-coretest6

m-fulltest: m-coretest m-stresstest


m-coretest: m-coretest$(HARNESS_TYPE)

m-spectest: m-spectest$(HARNESS_TYPE)

m-quicktest: m-quicktest$(HARNESS_TYPE)

m-stresstest: m-stresstest$(HARNESS_TYPE)

m-coretest5: m-all
	$(M_HARNESS5) t/01-sanity t/04-nativecall

# Run the spectests that we know work.
m-spectest5: m-testable t/spectest.data
	$(M_HARNESS5_WITH_FUDGE) --tests-from-file=t/spectest.data

m-spectest_full5: m-testable
	$(M_HARNESS5_WITH_FUDGE) t/spec

m-quicktest5: m-testable t/spectest.data
	$(M_HARNESS5_WITH_FUDGE) --tests-from-file=t/spectest.data --quick

m-stresstest5: m-testable t/spectest.data
	$(M_HARNESS5_WITH_FUDGE) --tests-from-file=t/spectest.data --stress


m-coretest6: m-all
	$(M_HARNESS6) t/01-sanity t/04-nativecall

# Run the spectests that we know work.
m-spectest6: m-testable t/spectest.data
	$(M_HARNESS6_WITH_FUDGE) --tests-from-file=t/spectest.data

m-spectest_full6: m-testable
	$(M_HARNESS6_WITH_FUDGE) t/spec

m-quicktest6: m-testable t/spectest.data
	$(M_HARNESS6_WITH_FUDGE) --tests-from-file=t/spectest.data --quick

m-stresstest6: m-testable t/spectest.data
	$(M_HARNESS6_WITH_FUDGE) --tests-from-file=t/spectest.data --stress


#spectest_smolder: rakudo_test_run.tar.gz
#	./perl6 -e "shell qqx[git log -1 --pretty=format:%H].fmt(qq[curl -F architecture=@cpuarch@ -F platform=@osname@ -F revision=%s -F report_file=@rakudo_test_run.tar.gz -F username=parrot-autobot -F password=qa_rocks http://smolder.parrot.org/app/projects/process_add_report/5])"

m-testable : m-all spectest_checkout spectest_update

# Run the tests in t/localtest.data
m-localtest: m-all spectest_checkout t/localtest.data
	@$(M_HARNESS6_WITH_FUDGE) --tests-from-file=t/localtest.data

# Run the tests in t/localtest.data with a higher verbosity
m-localtest_loud: m-all spectest_checkout t/localtest.data
	@$(M_HARNESS6_WITH_FUDGE) --tests-from-file=t/localtest.data --verbosity=1

# Run many tests of your choice.
# make sometests TESTFILES=t/foo/bar
m-sometests: m-all
	@$(M_HARNESS6_WITH_FUDGE) $(TESTFILES)

m-install: m-all tools/build/create-moar-runner.pl tools/build/install-core-dist.pl $(SETTING_MOAR)
	$(MKPATH) $(DESTDIR)$(PREFIX)/bin
	$(MKPATH) $(DESTDIR)$(M_LIBPATH)/Perl6
	$(M_RUN_CLEAN_TARGET_FILES) $(M_PERL6_LANG_OUTPUT) $(DESTDIR)/$(M_LIBPATH)/Perl6
	$(CP) $(M_PERL6_LANG_OUTPUT) $(DESTDIR)$(M_LIBPATH)/Perl6
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/lib
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(M_RUN_CLEAN_TARGET_FILES) $(SETTING_MOAR) $(SETTING_D_MOAR) $(R_SETTING_MOAR) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(M_RUN_CLEAN_TARGET_FILES) $(PERL6_MOAR) $(PERL6_DEBUG_MOAR) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(CP) $(SETTING_MOAR) $(SETTING_D_MOAR) $(R_SETTING_MOAR) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(CP) $(PERL6_MOAR) $(PERL6_DEBUG_MOAR) $(DESTDIR)$(PERL6_LANG_DIR)/runtime
	$(MKPATH) $(DESTDIR)$(PERL6_LANG_DIR)/runtime/dynext
	$(CP) $(M_PERL6_OPS_DLL) $(DESTDIR)$(PERL6_LANG_DIR)/runtime/dynext
	.@slash@$(M_RUNNER) tools/build/upgrade-repository.pl $(DESTDIR)$(PERL6_LANG_DIR)
	.@slash@$(M_RUNNER) tools/build/upgrade-repository.pl $(DESTDIR)$(PERL6_LANG_DIR)/vendor
	.@slash@$(M_RUNNER) tools/build/upgrade-repository.pl $(DESTDIR)$(PERL6_LANG_DIR)/site
	.@slash@$(M_RUNNER) tools/build/install-core-dist.pl $(DESTDIR)$(PERL6_LANG_DIR)
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-m "$(PERL6_LANG_DIR)/runtime" "" "" "$(M_LIBPATH)" "$(NQP_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6-debug.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-debug-m "$(PERL6_LANG_DIR)/runtime" "" "" "$(M_LIBPATH)" "$(NQP_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(CHMOD) 755 $(DESTDIR)$(PREFIX)/bin/perl6-m$(M_BAT)
@m_install@

m-runner-default-install: m-install
	$(M_RUN_PERL6) tools/build/create-moar-runner.pl "$(MOAR)" perl6.moarvm $(DESTDIR)$(PREFIX)/bin/perl6-m "$(PERL6_LANG_DIR)/runtime" "" "" "$(M_LIBPATH)" "$(NQP_LIBPATH)" "$(PERL6_LANG_DIR)/lib" "$(PERL6_LANG_DIR)/runtime"
	$(CP) $(DESTDIR)$(PREFIX)/bin/perl6-m$(M_BAT) $(DESTDIR)$(PREFIX)/bin/perl6$(M_BAT)
	$(CHMOD) 755 $(DESTDIR)$(PREFIX)/bin/perl6$(M_BAT)

manifest:
	echo MANIFEST >MANIFEST
	git ls-files | $(PERL5) -ne '/^\./ || print' >>MANIFEST
	cd t/spec && git clean -xdf
	find t/spec -type f | grep -v '\.git' >>MANIFEST
	sort -u -o MANIFEST MANIFEST

release: manifest
	[ -n "$(VERSION)" ] || ( echo "\nTry 'make release VERSION=yyyy.mm'\n\n"; exit 1 )
	bash -c '[ "$$(cat VERSION)" == "$(VERSION)" ] || ( echo -e "\nVersion on command line and in VERSION file differ\n"; exit 1 )'
	[ -d rakudo-$(VERSION) ] || ln -s . rakudo-$(VERSION)
	$(M_RUN_PERL6) -ne 'say "rakudo-$(VERSION)/$$_"' MANIFEST | \
	    tar -zcv -T - -f rakudo-$(VERSION).tar.gz
	rm rakudo-$(VERSION)


##  cleaning
m-clean:
	$(RM_F) $(M_CLEANUPS)
	$(RM_F) non-existent-copy-mtgt non-existent-copy-stgt

m-testclean:
